.instruction-ui {
  height: 100%;
  width: 100%;

  font-family: 'Courier New', Courier, monospace;

 
  .gui-icon.clear-icon {
    --icon: url("icons/playlist-x.svg");
  }
  .gui-icon.lock-icon {
    --icon: url("icons/lock.svg");
  }
  .gui-icon.unlock-icon {
    --icon: url("icons/lock-open.svg");
  }

  overflow: hidden;
  position: relative;
  .buttons {
    position: absolute;
    z-index: 10;
    top: 0;
    right: 0;
  }
  
  .instruction-container {
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    overflow-y: auto;

    /* I want the screen to follow scrolling behaviour, similar to a terminal. I'm currently using JS.
     * But I've tried to use CSS to do it. I've tried using CSS solutions from
     * https://stackoverflow.com/questions/18614301/keep-overflow-div-scrolled-to-bottom-unless-user-scrolls-up
     * such as: 
     * - using scroll snap (but I want to use snap for this other use case, so I can't use it that way).
     *   also, in firefox, it only allows scrolling with a trackpad/scrollbar, not with the mouse wheel.
     *   (i think this is https://bugzilla.mozilla.org/show_bug.cgi?id=1753188).
     * - using overflow-anchor and a div at the end of the page (but I couldn't get it to work, at least on FF).
     * - using flex-direction: column-reverse (but it only works on its own, not with scroll-snap-type: y mandatory).
     */
  
    /* This is for snapping the scroll to the nearest row (so the user can't see
     * half-rows */
    overscroll-behavior-y:auto;
    scroll-snap-type: y mandatory;
  }

  /* Show a pointer cursor when hovering over an address, in a row that has a
   * data-address attribute. (If the row doesn't have a data-address attribute,
   * the address is not clickable).
   */
  .row[data-address] {
    .address {
      cursor: pointer;
    }
  }

  .row {
    &:hover {
      --current-bg: var(--gui-color-highlight);
      background-color: var(--gui-color-highlight);
    }

    scroll-snap-align: end;

    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    
    &.pc {
      background-color: var(--gui-color-highlight);
    }
    
    &.overlap {
      cursor: help;
      text-decoration: line-through;
      .data {
        padding-left: 1em;
      }
    }

    .address {
      /* I've decided that the addresses are going to be formatted as equal
       * length strings, so I don't need to specify a fixed size with flex-basis.
       * A padding works well enough */
      /* flex-basis: 10%; */ 
      padding-right: 1em;
    }
    .address.breakpoint {
      --current-bg: var(--gui-color-red-background);
    }

    .raw {
      width: 10em;
      padding-right: 1em;
    }

    .data {
      /* flex: 2; */
      padding-right: 1em;
    }

    .extra {
      flex: 2;
      color: #888;
      text-decoration-color: #888;
      text-decoration-line: inherit;
    }
  }
}